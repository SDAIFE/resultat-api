import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';
import * as csv from 'csv-parser';

const prisma = new PrismaClient();

interface TblLvData {
  COD_DEPT: string;
  COD_SP: string;
  COD_COM: string;
  COD_LV: string;
  COD_CEL: string;
  LIB_LV: string;
}

async function createTblLv() {
  try {
    console.log('üöÄ D√©but de la cr√©ation de la table TBL_LV...');
    
    // Chemin vers le fichier CSV
    const csvFilePath = path.join(__dirname, '..', 'carto', '7-tbl_lv.csv');
    
    // V√©rifier que le fichier existe
    if (!fs.existsSync(csvFilePath)) {
      throw new Error(`Le fichier CSV n'existe pas : ${csvFilePath}`);
    }
    
    console.log(`üìÅ Lecture du fichier : ${csvFilePath}`);
    
    // Lire et parser le fichier CSV
    const records: TblLvData[] = [];
    
    await new Promise<void>((resolve, reject) => {
      fs.createReadStream(csvFilePath, { encoding: 'utf8' })
        .pipe(csv({ separator: ';' }))
        .on('data', (data: any) => {
          // Nettoyer les donn√©es en g√©rant le BOM
          const cleanData: TblLvData = {
            COD_DEPT: (data['ÔªøCOD_DEPT'] || data.COD_DEPT || '').trim(),
            COD_SP: (data.COD_SP || '').trim(),
            COD_COM: (data.COD_COM || '').trim(),
            COD_LV: (data.COD_LV || '').trim(),
            COD_CEL: (data.COD_CEL || '').trim(),
            LIB_LV: (data.LIB_LV || '').trim()
          };
          
          // V√©rifier que toutes les donn√©es requises sont pr√©sentes
          if (cleanData.COD_DEPT && cleanData.COD_SP && cleanData.COD_COM && 
              cleanData.COD_LV && cleanData.LIB_LV) {
            records.push(cleanData);
          }
        })
        .on('end', () => {
          console.log(`‚úÖ ${records.length} enregistrements lus depuis le CSV`);
          resolve();
        })
        .on('error', (error) => {
          console.error('‚ùå Erreur lors de la lecture du CSV:', error);
          reject(error);
        });
    });
    
    if (records.length === 0) {
      throw new Error('Aucun enregistrement valide trouv√© dans le fichier CSV');
    }
    
    // V√©rifier la connexion √† la base de donn√©es
    console.log('üîå Test de connexion √† la base de donn√©es...');
    await prisma.$connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
    
    // V√©rifier si la table existe d√©j√† et compter les enregistrements
    const existingCount = await prisma.tblLv.count();
    console.log(`üìä Nombre d'enregistrements existants dans TBL_LV : ${existingCount}`);
    
    if (existingCount > 0) {
      console.log('‚ö†Ô∏è  La table TBL_LV contient d√©j√† des donn√©es.');
      console.log('üîÑ Suppression des donn√©es existantes...');
      await prisma.tblLv.deleteMany({});
      console.log('‚úÖ Donn√©es existantes supprim√©es');
    }
    
    // Ins√©rer les donn√©es par lots pour optimiser les performances
    const batchSize = 1000;
    let insertedCount = 0;
    
    console.log(`üì• Insertion des donn√©es par lots de ${batchSize}...`);
    
    for (let i = 0; i < records.length; i += batchSize) {
      const batch = records.slice(i, i + batchSize);
      
      // Pr√©parer les donn√©es pour l'insertion
      const dataToInsert = batch.map(record => ({
        codeDepartement: record.COD_DEPT,
        codeSousPrefecture: record.COD_SP,
        codeCommune: record.COD_COM,
        codeLieuVote: record.COD_LV,
        codeCellule: record.COD_CEL || null,
        libelleLieuVote: record.LIB_LV
      }));
      
      try {
        await prisma.tblLv.createMany({
          data: dataToInsert
        });
        
        insertedCount += batch.length;
        console.log(`‚úÖ Lot ${Math.floor(i / batchSize) + 1} ins√©r√© (${insertedCount}/${records.length})`);
        
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'insertion du lot ${Math.floor(i / batchSize) + 1}:`, error);
        
        // Essayer d'ins√©rer les enregistrements un par un pour identifier les probl√®mes
        console.log('üîç Tentative d\'insertion individuelle pour ce lot...');
        for (const record of batch) {
          try {
            await prisma.tblLv.create({
              data: {
                codeDepartement: record.COD_DEPT,
                codeSousPrefecture: record.COD_SP,
                codeCommune: record.COD_COM,
                codeLieuVote: record.COD_LV,
                codeCellule: record.COD_CEL || null,
                libelleLieuVote: record.LIB_LV
              }
            });
            insertedCount++;
          } catch (individualError) {
            console.error(`‚ùå Erreur pour l'enregistrement ${record.COD_DEPT}-${record.COD_SP}-${record.COD_COM}-${record.COD_LV}:`, individualError);
          }
        }
      }
    }
    
    // V√©rifier le r√©sultat final
    const finalCount = await prisma.tblLv.count();
    console.log(`üéâ Import termin√© avec succ√®s !`);
    console.log(`üìä Total d'enregistrements dans TBL_LV : ${finalCount}`);
    console.log(`üìà Enregistrements ins√©r√©s : ${insertedCount}`);
    console.log(`üìâ Enregistrements ignor√©s : ${records.length - insertedCount}`);
    
    // Afficher quelques exemples d'enregistrements ins√©r√©s
    console.log('\nüìã Exemples d\'enregistrements ins√©r√©s :');
    const sampleRecords = await prisma.tblLv.findMany({
      take: 5,
      select: {
        codeDepartement: true,
        codeSousPrefecture: true,
        codeCommune: true,
        codeLieuVote: true,
        codeCellule: true,
        libelleLieuVote: true
      }
    });
    
    sampleRecords.forEach((record, index) => {
      console.log(`${index + 1}. ${record.codeDepartement}-${record.codeSousPrefecture}-${record.codeCommune}-${record.codeLieuVote} | ${record.libelleLieuVote}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la table TBL_LV:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
    console.log('üîå Connexion √† la base de donn√©es ferm√©e');
  }
}

// Fonction pour v√©rifier les d√©pendances (tables parentes)
async function checkDependencies() {
  try {
    console.log('üîç V√©rification des d√©pendances...');
    
    // V√©rifier les d√©partements
    const deptCount = await prisma.tblDept.count();
    console.log(`üìä Nombre de d√©partements : ${deptCount}`);
    
    // V√©rifier les sous-pr√©fectures
    const spCount = await prisma.tblSp.count();
    console.log(`üìä Nombre de sous-pr√©fectures : ${spCount}`);
    
    // V√©rifier les communes
    const comCount = await prisma.tblCom.count();
    console.log(`üìä Nombre de communes : ${comCount}`);
    
    // V√©rifier les cellules
    const celCount = await prisma.tblCel.count();
    console.log(`üìä Nombre de cellules : ${celCount}`);
    
    if (deptCount === 0) {
      console.log('‚ö†Ô∏è  Aucun d√©partement trouv√©. Assurez-vous d\'avoir import√© les donn√©es des d√©partements.');
    }
    
    if (spCount === 0) {
      console.log('‚ö†Ô∏è  Aucune sous-pr√©fecture trouv√©e. Assurez-vous d\'avoir import√© les donn√©es des sous-pr√©fectures.');
    }
    
    if (comCount === 0) {
      console.log('‚ö†Ô∏è  Aucune commune trouv√©e. Assurez-vous d\'avoir import√© les donn√©es des communes.');
    }
    
    console.log('‚úÖ V√©rification des d√©pendances termin√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des d√©pendances:', error);
  }
}

// Fonction pour tester uniquement la lecture CSV
async function testCsvOnly() {
  try {
    console.log('üß™ Test de lecture du fichier CSV uniquement...');
    
    const csvFilePath = path.join(__dirname, '..', 'carto', '7-tbl_lv.csv');
    console.log(`üìÅ Lecture du fichier : ${csvFilePath}`);
    
    if (!fs.existsSync(csvFilePath)) {
      throw new Error(`Le fichier CSV n'existe pas : ${csvFilePath}`);
    }
    
    const records: TblLvData[] = [];
    
    await new Promise<void>((resolve, reject) => {
      fs.createReadStream(csvFilePath, { encoding: 'utf8' })
        .pipe(csv({ separator: ';' }))
        .on('data', (data: any) => {
          // Nettoyer les donn√©es en g√©rant le BOM
          const cleanData: TblLvData = {
            COD_DEPT: (data['ÔªøCOD_DEPT'] || data.COD_DEPT || '').trim(),
            COD_SP: (data.COD_SP || '').trim(),
            COD_COM: (data.COD_COM || '').trim(),
            COD_LV: (data.COD_LV || '').trim(),
            COD_CEL: (data.COD_CEL || '').trim(),
            LIB_LV: (data.LIB_LV || '').trim()
          };
          
          // V√©rifier que toutes les donn√©es requises sont pr√©sentes
          if (cleanData.COD_DEPT && cleanData.COD_SP && cleanData.COD_COM && 
              cleanData.COD_LV && cleanData.LIB_LV) {
            records.push(cleanData);
          }
        })
        .on('end', () => {
          console.log(`‚úÖ ${records.length} enregistrements lus depuis le CSV`);
          resolve();
        })
        .on('error', (error) => {
          console.error('‚ùå Erreur lors de la lecture du CSV:', error);
          reject(error);
        });
    });
    
    if (records.length === 0) {
      throw new Error('Aucun enregistrement valide trouv√© dans le fichier CSV');
    }
    
    console.log(`üéâ Lecture CSV r√©ussie !`);
    console.log(`üìä Total d'enregistrements valides : ${records.length}`);
    
    // Afficher quelques exemples
    console.log('\nüìã Exemples d\'enregistrements lus :');
    records.slice(0, 5).forEach((record, index) => {
      console.log(`${index + 1}. ${record.COD_DEPT}-${record.COD_SP}-${record.COD_COM}-${record.COD_LV} | ${record.LIB_LV}`);
    });
    
    console.log('\n‚úÖ Le script de lecture CSV fonctionne correctement !');
    console.log('üí° Pour utiliser avec la base de donn√©es, configurez correctement le fichier .env');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture du CSV:', error);
    throw error;
  }
}

// Fonction principale
async function main() {
  try {
    console.log('üéØ Script de cr√©ation de la table TBL_LV');
    console.log('==========================================');
    
    // V√©rifier si on peut se connecter √† la base de donn√©es
    try {
      await prisma.$connect();
      console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');
      
      // V√©rifier les d√©pendances d'abord
      await checkDependencies();
      
      // Cr√©er la table avec les donn√©es
      await createTblLv();
      
      console.log('\nüéâ Script termin√© avec succ√®s !');
      
    } catch (dbError) {
      console.log('‚ö†Ô∏è  Impossible de se connecter √† la base de donn√©es');
      console.log('üîç Erreur:', dbError.message);
      console.log('\nüß™ Test de lecture CSV uniquement...');
      
      await testCsvOnly();
      
      console.log('\nüí° Pour utiliser avec la base de donn√©es :');
      console.log('1. Configurez correctement DATABASE_URL dans le fichier .env');
      console.log('2. Assurez-vous que la base de donn√©es est accessible');
      console.log('3. Relancez le script');
    }
    
  } catch (error) {
    console.error('\nüí• Le script a √©chou√©:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  main();
}

export { createTblLv, checkDependencies };
