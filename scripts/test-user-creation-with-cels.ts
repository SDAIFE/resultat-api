#!/usr/bin/env ts-node

/**
 * Script de test pour la cr√©ation d'utilisateur avec CELs
 */

import axios from 'axios';

const API_BASE_URL = 'http://localhost:3001/api';

let accessToken: string;

async function login(): Promise<boolean> {
  console.log('üîê Connexion...');
  
  try {
    const response = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'anderson.aka@cei.ci',
      password: 'motdepasse123'
    });

    accessToken = response.data.accessToken;
    console.log('‚úÖ Connexion r√©ussie');
    return true;
  } catch (error: any) {
    console.error('‚ùå Erreur de connexion:', error.response?.data || error.message);
    return false;
  }
}

async function getFormData(): Promise<{
  roles: any[];
  departements: any[];
  cels: any[];
}> {
  console.log('\nüìã R√©cup√©ration des donn√©es pour le formulaire...');
  
  try {
    const [rolesResponse, departementsResponse, celsResponse] = await Promise.all([
      axios.get(`${API_BASE_URL}/roles/list/simple`, {
        headers: { 'Authorization': `Bearer ${accessToken}` }
      }),
      axios.get(`${API_BASE_URL}/departements/list/simple`, {
        headers: { 'Authorization': `Bearer ${accessToken}` }
      }),
      axios.get(`${API_BASE_URL}/cels/list/simple`, {
        headers: { 'Authorization': `Bearer ${accessToken}` }
      })
    ]);

    console.log('‚úÖ Donn√©es r√©cup√©r√©es:');
    console.log(`- ${rolesResponse.data.length} r√¥les disponibles`);
    console.log(`- ${departementsResponse.data.length} d√©partements disponibles`);
    console.log(`- ${celsResponse.data.length} CELs disponibles`);

    return {
      roles: rolesResponse.data,
      departements: departementsResponse.data,
      cels: celsResponse.data
    };
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration:', error.response?.data || error.message);
    throw error;
  }
}

async function testUserCreationWithCels(roles: any[], departements: any[], cels: any[]): Promise<void> {
  console.log('\nüë§ Test de cr√©ation d\'utilisateur avec CELs...');
  
  try {
    // S√©lectionner des donn√©es
    const selectedRole = roles.find(r => r.code === 'USER') || roles[0];
    const selectedDepartements = departements.slice(0, 2).map(d => d.codeDepartement);
    const selectedCels = cels.slice(0, 3).map(c => c.codeCellule);

    const userData = {
      email: `user.with.cels.${Date.now()}@example.com`,
      firstName: 'User',
      lastName: 'With CELs',
      password: 'password123',
      roleId: selectedRole.id,
      departementCodes: selectedDepartements,
      celCodes: selectedCels,
      isActive: true
    };

    console.log('üìù Donn√©es de cr√©ation:');
    console.log('- Email:', userData.email);
    console.log('- Nom:', userData.firstName, userData.lastName);
    console.log('- R√¥le:', selectedRole.code, '-', selectedRole.name);
    console.log('- D√©partements:', selectedDepartements);
    console.log('- CELs:', selectedCels);

    const response = await axios.post(`${API_BASE_URL}/users`, userData, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s !');
    console.log('ID:', response.data.id);
    console.log('Email:', response.data.email);
    console.log('R√¥le:', response.data.role.code, '-', response.data.role.name);
    console.log('D√©partements assign√©s:', response.data.departements.length);
    console.log('CELs assign√©es:', response.data.cellules.length);
    console.log('Statut actif:', response.data.isActive);

    // Afficher les d√©tails des CELs assign√©es
    if (response.data.cellules.length > 0) {
      console.log('\nüìã CELs assign√©es:');
      response.data.cellules.forEach((cel: any, index: number) => {
        console.log(`  ${index + 1}. ${cel.codeCellule} - ${cel.libelleCellule}`);
      });
    }

    // Nettoyer - supprimer l'utilisateur cr√©√©
    console.log('\nüßπ Nettoyage...');
    await axios.delete(`${API_BASE_URL}/users/${response.data.id}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log('‚úÖ Utilisateur supprim√©');

  } catch (error: any) {
    console.error('‚ùå Erreur lors de la cr√©ation:', error.response?.data || error.message);
  }
}

async function testUserCreationMinimal(): Promise<void> {
  console.log('\nüë§ Test de cr√©ation minimale (sans CELs)...');
  
  try {
    const userData = {
      email: `minimal.${Date.now()}@example.com`,
      firstName: 'Minimal',
      lastName: 'User',
      password: 'password123'
    };

    console.log('üìù Donn√©es minimales:', userData);

    const response = await axios.post(`${API_BASE_URL}/users`, userData, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s !');
    console.log('ID:', response.data.id);
    console.log('Email:', response.data.email);
    console.log('D√©partements assign√©s:', response.data.departements.length);
    console.log('CELs assign√©es:', response.data.cellules.length);

    // Nettoyer
    await axios.delete(`${API_BASE_URL}/users/${response.data.id}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log('üßπ Utilisateur supprim√©');

  } catch (error: any) {
    console.error('‚ùå Erreur lors de la cr√©ation:', error.response?.data || error.message);
  }
}

async function testValidationErrors(): Promise<void> {
  console.log('\n‚ùå Test de validation des erreurs...');
  
  const testCases = [
    {
      name: 'CELs inexistantes',
      data: {
        email: 'test@example.com',
        firstName: 'Test',
        lastName: 'User',
        password: 'password123',
        celCodes: ['CEL_INEXISTANTE_1', 'CEL_INEXISTANTE_2']
      }
    },
    {
      name: 'M√©lange CELs valides et invalides',
      data: {
        email: 'test2@example.com',
        firstName: 'Test',
        lastName: 'User',
        password: 'password123',
        celCodes: ['041', 'CEL_INEXISTANTE']
      }
    }
  ];

  for (const testCase of testCases) {
    try {
      console.log(`\nüß™ Test: ${testCase.name}`);
      console.log('Donn√©es:', testCase.data);

      await axios.post(`${API_BASE_URL}/users`, testCase.data, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('‚ùå Erreur: La validation aurait d√ª √©chouer !');

    } catch (error: any) {
      console.log('‚úÖ Validation correcte - Erreur attendue:');
      console.log('Status:', error.response?.status);
      console.log('Message:', error.response?.data?.message);
    }
  }
}

async function main(): Promise<void> {
  console.log('üß™ Test de cr√©ation d\'utilisateur avec CELs\n');
  console.log('Base URL:', API_BASE_URL);
  console.log('=' .repeat(60));

  // Connexion
  const loggedIn = await login();
  if (!loggedIn) {
    console.log('\n‚ùå Impossible de continuer sans connexion');
    return;
  }

  try {
    // R√©cup√©rer les donn√©es du formulaire
    const { roles, departements, cels } = await getFormData();

    // Tests de cr√©ation
    await testUserCreationWithCels(roles, departements, cels);
    await testUserCreationMinimal();
    await testValidationErrors();

    console.log('\nüéâ Tous les tests termin√©s !');
    console.log('\nüí° Le frontend peut maintenant cr√©er des utilisateurs avec des CELs assign√©es');

  } catch (error) {
    console.error('\n‚ùå Erreur g√©n√©rale:', error);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
