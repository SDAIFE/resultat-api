#!/usr/bin/env ts-node

/**
 * Script de test complet pour la cr√©ation d'utilisateur avec toutes les options
 */

import axios from 'axios';

const API_BASE_URL = 'http://localhost:3001/api';

let accessToken: string;

async function login(): Promise<boolean> {
  console.log('üîê Connexion...');
  
  try {
    const response = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'anderson.aka@cei.ci',
      password: 'motdepasse123'
    });

    accessToken = response.data.accessToken;
    console.log('‚úÖ Connexion r√©ussie');
    return true;
  } catch (error: any) {
    console.error('‚ùå Erreur de connexion:', error.response?.data || error.message);
    return false;
  }
}

async function getFormData(): Promise<{
  roles: any[];
  departements: any[];
}> {
  console.log('\nüìã R√©cup√©ration des donn√©es pour le formulaire...');
  
  try {
    const [rolesResponse, departementsResponse] = await Promise.all([
      axios.get(`${API_BASE_URL}/roles/list/simple`, {
        headers: { 'Authorization': `Bearer ${accessToken}` }
      }),
      axios.get(`${API_BASE_URL}/departements/list/simple`, {
        headers: { 'Authorization': `Bearer ${accessToken}` }
      })
    ]);

    console.log('‚úÖ Donn√©es r√©cup√©r√©es:');
    console.log(`- ${rolesResponse.data.length} r√¥les disponibles`);
    console.log(`- ${departementsResponse.data.length} d√©partements disponibles`);

    return {
      roles: rolesResponse.data,
      departements: departementsResponse.data
    };
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration:', error.response?.data || error.message);
    throw error;
  }
}

async function testMinimalUserCreation(): Promise<void> {
  console.log('\nüë§ Test 1: Cr√©ation minimale (donn√©es obligatoires seulement)...');
  
  try {
    const userData = {
      email: `minimal.${Date.now()}@example.com`,
      firstName: 'Minimal',
      lastName: 'User',
      password: 'password123'
    };

    console.log('üìù Donn√©es:', userData);

    const response = await axios.post(`${API_BASE_URL}/users`, userData, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s !');
    console.log('ID:', response.data.id);
    console.log('Email:', response.data.email);
    console.log('R√¥le par d√©faut:', response.data.role.code);
    console.log('Statut actif:', response.data.isActive);

    // Nettoyer
    await axios.delete(`${API_BASE_URL}/users/${response.data.id}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log('üßπ Utilisateur supprim√©');

  } catch (error: any) {
    console.error('‚ùå Erreur:', error.response?.data || error.message);
  }
}

async function testCompleteUserCreation(roles: any[], departements: any[]): Promise<void> {
  console.log('\nüë§ Test 2: Cr√©ation compl√®te (toutes les options)...');
  
  try {
    // S√©lectionner un r√¥le et des d√©partements
    const selectedRole = roles.find(r => r.code === 'ADMIN') || roles[0];
    const selectedDepartements = departements.slice(0, 3).map(d => d.codeDepartement);

    const userData = {
      email: `complete.${Date.now()}@example.com`,
      firstName: 'Complete',
      lastName: 'User',
      password: 'password123',
      roleId: selectedRole.id,
      departementCodes: selectedDepartements,
      isActive: true
    };

    console.log('üìù Donn√©es compl√®tes:');
    console.log('- Email:', userData.email);
    console.log('- Nom:', userData.firstName, userData.lastName);
    console.log('- R√¥le:', selectedRole.code, '-', selectedRole.name);
    console.log('- D√©partements:', selectedDepartements);

    const response = await axios.post(`${API_BASE_URL}/users`, userData, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s !');
    console.log('ID:', response.data.id);
    console.log('Email:', response.data.email);
    console.log('R√¥le:', response.data.role.code, '-', response.data.role.name);
    console.log('D√©partements assign√©s:', response.data.departements.length);
    console.log('Statut actif:', response.data.isActive);

    // Nettoyer
    await axios.delete(`${API_BASE_URL}/users/${response.data.id}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log('üßπ Utilisateur supprim√©');

  } catch (error: any) {
    console.error('‚ùå Erreur:', error.response?.data || error.message);
  }
}

async function testUserWithSpecificRole(roles: any[]): Promise<void> {
  console.log('\nüë§ Test 3: Cr√©ation avec r√¥le sp√©cifique (USER)...');
  
  try {
    const userRole = roles.find(r => r.code === 'USER');
    if (!userRole) {
      console.log('‚ùå R√¥le USER non trouv√©');
      return;
    }

    const userData = {
      email: `user.role.${Date.now()}@example.com`,
      firstName: 'User',
      lastName: 'Role',
      password: 'password123',
      roleId: userRole.id,
      isActive: true
    };

    console.log('üìù Donn√©es avec r√¥le USER:');
    console.log('- Email:', userData.email);
    console.log('- R√¥le:', userRole.code, '-', userRole.name);

    const response = await axios.post(`${API_BASE_URL}/users`, userData, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s !');
    console.log('ID:', response.data.id);
    console.log('R√¥le confirm√©:', response.data.role.code, '-', response.data.role.name);

    // Nettoyer
    await axios.delete(`${API_BASE_URL}/users/${response.data.id}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log('üßπ Utilisateur supprim√©');

  } catch (error: any) {
    console.error('‚ùå Erreur:', error.response?.data || error.message);
  }
}

async function testValidationErrors(): Promise<void> {
  console.log('\n‚ùå Test 4: Validation des erreurs...');
  
  const testCases = [
    {
      name: 'Email invalide',
      data: {
        email: 'email-invalide',
        firstName: 'Test',
        lastName: 'User',
        password: 'password123'
      }
    },
    {
      name: 'Mot de passe trop court',
      data: {
        email: 'test@example.com',
        firstName: 'Test',
        lastName: 'User',
        password: '123'
      }
    },
    {
      name: 'Pr√©nom manquant',
      data: {
        email: 'test@example.com',
        lastName: 'User',
        password: 'password123'
      }
    },
    {
      name: 'R√¥le inexistant',
      data: {
        email: 'test@example.com',
        firstName: 'Test',
        lastName: 'User',
        password: 'password123',
        roleId: 'ROLE_INEXISTANT'
      }
    }
  ];

  for (const testCase of testCases) {
    try {
      console.log(`\nüß™ Test: ${testCase.name}`);
      console.log('Donn√©es:', testCase.data);

      await axios.post(`${API_BASE_URL}/users`, testCase.data, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('‚ùå Erreur: La validation aurait d√ª √©chouer !');

    } catch (error: any) {
      console.log('‚úÖ Validation correcte - Erreur attendue:');
      console.log('Status:', error.response?.status);
      console.log('Message:', error.response?.data?.message);
    }
  }
}

async function main(): Promise<void> {
  console.log('üß™ Test complet de cr√©ation d\'utilisateur\n');
  console.log('Base URL:', API_BASE_URL);
  console.log('=' .repeat(60));

  // Connexion
  const loggedIn = await login();
  if (!loggedIn) {
    console.log('\n‚ùå Impossible de continuer sans connexion');
    return;
  }

  try {
    // R√©cup√©rer les donn√©es du formulaire
    const { roles, departements } = await getFormData();

    // Tests de cr√©ation
    await testMinimalUserCreation();
    await testCompleteUserCreation(roles, departements);
    await testUserWithSpecificRole(roles);
    await testValidationErrors();

    console.log('\nüéâ Tous les tests termin√©s !');
    console.log('\nüí° Le frontend peut maintenant impl√©menter la cr√©ation d\'utilisateurs avec toutes ces options');

  } catch (error) {
    console.error('\n‚ùå Erreur g√©n√©rale:', error);
  }
}

if (require.main === module) {
  main().catch(console.error);
}
