#!/usr/bin/env ts-node

/**
 * Script de test pour les erreurs de validation
 */

import axios from 'axios';

const API_BASE_URL = 'http://localhost:3001/api';

async function testValidationErrors(): Promise<void> {
  console.log('üß™ Test des erreurs de validation\n');

  // Test 1: Login sans email
  console.log('1Ô∏è‚É£ Test login sans email...');
  try {
    await axios.post(`${API_BASE_URL}/auth/login`, {
      password: 'motdepasse123'
    });
    console.log('‚ùå Devrait √©chouer mais a r√©ussi');
  } catch (error: any) {
    if (error.response?.status === 400) {
      console.log('‚úÖ Erreur 400 attendue:', error.response.data.message);
    } else {
      console.log('‚ùå Erreur inattendue:', error.response?.data || error.message);
    }
  }

  // Test 2: Login avec email invalide
  console.log('\n2Ô∏è‚É£ Test login avec email invalide...');
  try {
    await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'email-invalide',
      password: 'motdepasse123'
    });
    console.log('‚ùå Devrait √©chouer mais a r√©ussi');
  } catch (error: any) {
    if (error.response?.status === 400) {
      console.log('‚úÖ Erreur 400 attendue:', error.response.data.message);
    } else {
      console.log('‚ùå Erreur inattendue:', error.response?.data || error.message);
    }
  }

  // Test 3: Refresh token sans refreshToken
  console.log('\n3Ô∏è‚É£ Test refresh sans refreshToken...');
  try {
    await axios.post(`${API_BASE_URL}/auth/refresh`, {});
    console.log('‚ùå Devrait √©chouer mais a r√©ussi');
  } catch (error: any) {
    if (error.response?.status === 400) {
      console.log('‚úÖ Erreur 400 attendue:', error.response.data.message);
    } else {
      console.log('‚ùå Erreur inattendue:', error.response?.data || error.message);
    }
  }

  // Test 4: Logout sans refreshToken
  console.log('\n4Ô∏è‚É£ Test logout sans refreshToken...');
  try {
    // D'abord se connecter pour avoir un token
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'anderson.aka@cei.ci',
      password: 'motdepasse123'
    });

    await axios.post(`${API_BASE_URL}/auth/logout`, {}, {
      headers: {
        'Authorization': `Bearer ${loginResponse.data.accessToken}`
      }
    });
    console.log('‚ùå Devrait √©chouer mais a r√©ussi');
  } catch (error: any) {
    if (error.response?.status === 400) {
      console.log('‚úÖ Erreur 400 attendue:', error.response.data.message);
    } else if (error.response?.status === 500) {
      console.log('‚úÖ Erreur 500 attendue (validation c√¥t√© serveur):', error.response.data.message);
    } else {
      console.log('‚ùå Erreur inattendue:', error.response?.data || error.message);
    }
  }

  // Test 5: Donn√©es suppl√©mentaires non autoris√©es
  console.log('\n5Ô∏è‚É£ Test avec donn√©es suppl√©mentaires non autoris√©es...');
  try {
    await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'anderson.aka@cei.ci',
      password: 'motdepasse123',
      extraField: 'should-be-ignored'
    });
    console.log('‚úÖ Login r√©ussi (donn√©es suppl√©mentaires ignor√©es)');
  } catch (error: any) {
    if (error.response?.status === 400) {
      console.log('‚úÖ Erreur 400 attendue (donn√©es non autoris√©es):', error.response.data.message);
    } else {
      console.log('‚ùå Erreur inattendue:', error.response?.data || error.message);
    }
  }

  console.log('\nüéâ Tests de validation termin√©s !');
}

async function main(): Promise<void> {
  console.log('üîç Test de la validation des donn√©es\n');
  console.log('Base URL:', API_BASE_URL);
  console.log('=' .repeat(50));

  await testValidationErrors();
}

if (require.main === module) {
  main().catch(console.error);
}
