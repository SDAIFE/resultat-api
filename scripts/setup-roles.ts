#!/usr/bin/env ts-node

/**
 * Script de configuration des r√¥les et cr√©ation du Super Administrateur
 * 
 * Ce script :
 * 1. Cr√©e tous les r√¥les de base n√©cessaires √† l'application
 * 2. Cr√©e le Super Administrateur avec les informations sp√©cifi√©es
 */

import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

// D√©finition des r√¥les de base
const ROLES_TO_CREATE = [
  {
    code: 'SADMIN',
    name: 'Super Administrateur',
    description: 'Acc√®s complet au syst√®me - Gestion de tous les utilisateurs et donn√©es'
  },
  {
    code: 'ADMIN',
    name: 'Administrateur',
    description: 'Administration des utilisateurs et donn√©es - Gestion des imports et publications'
  },
  {
    code: 'USER',
    name: 'Utilisateur',
    description: 'Utilisateur Informaticien - Import et gestion des donn√©es de sa CEL'
  }
];

// Informations du Super Administrateur
const SUPER_ADMIN_INFO = {
  email: 'anderson.aka@cei.ci',
  firstName: 'Anderson',
  lastName: 'Aka',
  password: 'adminDtic@2025!',
  roleCode: 'SADMIN'
};

async function createRoles(): Promise<void> {
  console.log('üîê Cr√©ation des r√¥les de base...\n');

  for (const roleData of ROLES_TO_CREATE) {
    try {
      // V√©rifier si le r√¥le existe d√©j√†
      const existingRole = await prisma.role.findUnique({
        where: { code: roleData.code }
      });

      if (existingRole) {
        console.log(`‚ö†Ô∏è  Le r√¥le ${roleData.code} existe d√©j√†`);
        console.log(`   Nom: ${existingRole.name}`);
        console.log(`   Description: ${existingRole.description}`);
      } else {
        // Cr√©er le r√¥le
        const role = await prisma.role.create({
          data: {
            code: roleData.code,
            name: roleData.name,
            description: roleData.description
          }
        });

        console.log(`‚úÖ R√¥le ${roleData.code} cr√©√© avec succ√®s`);
        console.log(`   ID: ${role.id}`);
        console.log(`   Nom: ${role.name}`);
        console.log(`   Description: ${role.description}`);
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la cr√©ation du r√¥le ${roleData.code}:`, error);
    }
    console.log(''); // Ligne vide pour la lisibilit√©
  }
}

async function createSuperAdmin(): Promise<void> {
  console.log('üëë Cr√©ation du Super Administrateur...\n');

  try {
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email: SUPER_ADMIN_INFO.email }
    });

    if (existingUser) {
      console.log(`‚ö†Ô∏è  L'utilisateur ${SUPER_ADMIN_INFO.email} existe d√©j√†`);
      console.log(`   ID: ${existingUser.id}`);
      console.log(`   Nom: ${existingUser.firstName} ${existingUser.lastName}`);
      console.log(`   Actif: ${existingUser.isActive}`);
      
      // V√©rifier le r√¥le actuel
      const userWithRole = await prisma.user.findUnique({
        where: { id: existingUser.id },
        include: { role: true }
      });
      
      if (userWithRole?.role.code === 'SADMIN') {
        console.log(`   R√¥le: ${userWithRole.role.code} - ${userWithRole.role.name}`);
        console.log('‚úÖ Super Administrateur d√©j√† configur√© correctement');
      } else {
        console.log(`   R√¥le actuel: ${userWithRole?.role.code || 'Non d√©fini'}`);
        console.log('‚ö†Ô∏è  Le r√¥le doit √™tre mis √† jour vers SADMIN');
        
        // Mettre √† jour le r√¥le vers SADMIN
        const sadminRole = await prisma.role.findUnique({
          where: { code: 'SADMIN' }
        });
        
        if (sadminRole) {
          await prisma.user.update({
            where: { id: existingUser.id },
            data: { roleId: sadminRole.id }
          });
          console.log('‚úÖ R√¥le mis √† jour vers SADMIN');
        }
      }
      return;
    }

    // V√©rifier que le r√¥le SADMIN existe
    const sadminRole = await prisma.role.findUnique({
      where: { code: SUPER_ADMIN_INFO.roleCode }
    });

    if (!sadminRole) {
      console.error(`‚ùå Le r√¥le ${SUPER_ADMIN_INFO.roleCode} n'existe pas. Veuillez d'abord cr√©er les r√¥les.`);
      return;
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(SUPER_ADMIN_INFO.password, 12);

    // Cr√©er le Super Administrateur
    const superAdmin = await prisma.user.create({
      data: {
        email: SUPER_ADMIN_INFO.email,
        firstName: SUPER_ADMIN_INFO.firstName,
        lastName: SUPER_ADMIN_INFO.lastName,
        password: hashedPassword,
        roleId: sadminRole.id,
        isActive: true
      },
      include: {
        role: true
      }
    });

    console.log('‚úÖ Super Administrateur cr√©√© avec succ√®s !');
    console.log(`   ID: ${superAdmin.id}`);
    console.log(`   Email: ${superAdmin.email}`);
    console.log(`   Nom: ${superAdmin.firstName} ${superAdmin.lastName}`);
    console.log(`   R√¥le: ${superAdmin.role.code} - ${superAdmin.role.name}`);
    console.log(`   Actif: ${superAdmin.isActive}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du Super Administrateur:', error);
  }
}

async function displaySummary(): Promise<void> {
  console.log('\nüìä R√©sum√© de la configuration...\n');

  try {
    // Lister tous les r√¥les
    const roles = await prisma.role.findMany({
      orderBy: { code: 'asc' }
    });

    console.log('üîê R√¥les disponibles:');
    roles.forEach(role => {
      console.log(`   ${role.code} - ${role.name}`);
      console.log(`      Description: ${role.description}`);
    });

    console.log('\nüëë Super Administrateur:');
    const superAdmin = await prisma.user.findUnique({
      where: { email: SUPER_ADMIN_INFO.email },
      include: { role: true }
    });

    if (superAdmin) {
      console.log(`   Email: ${superAdmin.email}`);
      console.log(`   Nom: ${superAdmin.firstName} ${superAdmin.lastName}`);
      console.log(`   R√¥le: ${superAdmin.role.code} - ${superAdmin.role.name}`);
      console.log(`   Actif: ${superAdmin.isActive}`);
      
      console.log('\nüß™ Informations de connexion:');
      console.log(`   Email: ${SUPER_ADMIN_INFO.email}`);
      console.log(`   Mot de passe: ${SUPER_ADMIN_INFO.password}`);
    } else {
      console.log('   ‚ùå Super Administrateur non trouv√©');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'affichage du r√©sum√©:', error);
  }
}

async function main(): Promise<void> {
  console.log('üöÄ Configuration des r√¥les et cr√©ation du Super Administrateur\n');
  console.log('=' .repeat(70));

  try {
    // 1. Cr√©er les r√¥les
    await createRoles();

    // 2. Cr√©er le Super Administrateur
    await createSuperAdmin();

    // 3. Afficher le r√©sum√©
    await displaySummary();

    console.log('\n‚úÖ Configuration termin√©e avec succ√®s !');
    console.log('\nüí° Vous pouvez maintenant :');
    console.log('   1. Vous connecter avec le Super Administrateur');
    console.log('   2. Cr√©er d\'autres utilisateurs via l\'API');
    console.log('   3. Assigner des r√¥les aux utilisateurs');

  } catch (error) {
    console.error('\n‚ùå Erreur g√©n√©rale lors de la configuration:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  main();
}
